---
title: "Point estimation"
author: "Evgeny Bakin"
date: '2024-06-08'
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)

```

# Создание выборок из генеральных совокупностей с заданным распределением.

## Дискретные распределения или категориальные призныки
Принцип виртуального госпиталя - сами генерим данные
sample - функция для генерации выборки (x - какие значения может принимать признак, prob - вероятности значений, size - размер выборки, replace = TRUE - значения могут повторяться несколько раз)
table - создаем двумерную таблицу
barplot - строим барплот по таблице
При помощи sample можем генерировать любые признаки, но в данном случае мы генерим дихотомический, дискретный признак (female, male)

```{r generate_discrete, echo = FALSE}

sample_size <- 10000 # Сколько пациентов желаете сгенерировать?

potential_values <- c("male", "female") # Какие значения может принимать признак

probabilities <- c(0.5, 0.5) # Вероятности тех или иных значений

my_sample_1 <- sample(x = potential_values,
                      prob = probabilities,
                      size = sample_size,
                      replace = TRUE) # Заклинание, создающее выборку

print(my_sample_1)

tb <- table(my_sample_1)

print(tb)

barplot(tb)
```

## Непрерывные распределения

### Равномерное распределение
runif - равномерное распределение - любое число от 40 до 100 выпадает с равной вероятностью
```{r generate_continuous_unif, echo = FALSE}

min_value <- 40 # Минимальное значение биомаркера
max_value <- 100 # Минимальное значение биомаркера

my_sample_2 <- runif(sample_size,
                     min = min_value,
                     max = max_value) # Заклинание, создающее выборку

print(my_sample_2)

hist(my_sample_2)

```

### Нормальное распределение
rnorm 
```{r generate_continuous_norm, echo = FALSE}

mean_age <- 40 # Средний возраст в генеральной совокупности
sd_age <- 10 # Стандартное отклонение возраста в генеральной совокупности
  
my_sample_3 <- rnorm(sample_size,
                     mean = mean_age,
                     sd = sd_age) # Заклинание, создающее выборку

print(my_sample_3)

hist(my_sample_3)

```

### Экспоненциальное распределение
типовое распрределение для признака время жизни после операции, некоторые биомаркеры распределены похожим образом.
rexp 
```{r generate_continuous_exp, echo = FALSE}

mean_life <- 10 # Средняя продолжительность жизни в генеральной совокупности

my_sample_4 <- rexp(sample_size,
                    rate = 1/mean_life) # Заклинание, создающее выборку

print(my_sample_4)

hist(my_sample_4)

```

# Объединение в дата-фрейм
то что сверху нагенерили запихиваем в датафрейм, потом по нему можем посмотреть сводные характеристики. По синтетическому датасету заранее знаем правильный ответ, это плюс
```{r combine}

df <- data.frame(ID = 1:sample_size,
                 sex = my_sample_1,
                 biomarker = round(my_sample_2, 1),
                 age = round(my_sample_3),
                 life = round(my_sample_4))

df

df_summary <- df %>% 
  group_by(sex) %>% 
  dplyr::summarise(mu = mean(biomarker),
                   sd = sd(biomarker),
                   se = sd(biomarker)/sqrt(n()))
         

df_summary
```

# Первое клиническое исследование: чему равен средний прирост гемоглобина?

## Я - главный исследователь

```{r mean_est, echo = FALSE}

n <- 10 # Сколько виртуальных добровольцев включим в исследование?

mean_Hg <- +15 # Истинный средний прирост гемоглобина в генеральной совокупности
sd_Hg <- 10 # Истинное стандартное отклонение (вариабельность) прироста гемоглобина в генеральной совокупности

df <- data.frame(
  ID =  1:n,
  Hg = round(rnorm(n, mean = mean_Hg, sd = sd_Hg) )
)

hist(df$Hg)

print(mean(df$Hg)) # Оцениваем среднее по выборке

print(mean(df$Hg) - mean_Hg) # Оцениваем ошибку 

```

## Я - супер-главный исследователь
sapply - повторяет заданную последовательность команд нужное число раз, тут 1000 раз выполняем клиническое исследование на выборке в 10 человек и оцениваем как отличается от среднего в ГС по каждой выборке
Зависимость между количеством добровольцев и стандартной ошибкой обратная квадратичная (изменение выборки есть изменение квадрата ошибки, изменение ошибки обратно пропорционально корню из квадрата выборки) довольно пессиместично. Но позитивно, что если меньше выборка, то точность не так сильно упадет. 
Между вариативностью (sd) и стандартной ошибкой прямая зависимость - увеличили в два раза, она в два раза выросла, уменьшили в два раза она в два раза уменьшилась
Взаимосвязь ошибки с sd прямая, с объемом выборки обратно пропорциональна корню

```{r mean_est_repeat, echo = FALSE}

n <- 10 # Сколько виртуальных добровольцев включим в исследование?

mean_Hg <- +15 # Истинный средний прирост гемоглобина в генеральной совокупности
sd_Hg <- 1 # Истинное стандартное отклонение (вариабельность) прироста гемоглобина в генеральной совокупности

errors <- sapply(1:1000, function(x){
  
  df <- data.frame(
    ID =  1:n,
    Hg = round( rnorm(n, mean = mean_Hg, sd = sd_Hg) )
  )
  
  est_mean_Hg <- mean(df$Hg)
  
  est_mean_Hg - mean_Hg
})

hist(errors) # Как мы ошибались в разных исследованиях?

print(sqrt(mean(errors^2))) # Как нам правильно усреднить величину ошибки?
#SE, standard error, стандартная ошибка, истинная стандартная ошибка, так как знаем правильный ответ (среднее в ГС)

```

# Второе клиническое исследование: чему равна вероятность рецидива после терапии?

## Я - главный исследователь

```{r pr_est, echo = FALSE}

n <- 30 # Сколько виртуальных добровольцев включим в исследование?

pr_relapse <- 0.5 # Истинная вероятность рецидива

potential_values <- c("relapse", "non-relapse") # Какие значения может принимать признак

probabilities <- c(pr_relapse, 1-pr_relapse) #  Вероятности

df <- data.frame(
  ID =  1:n,
  outcome = sample(x = potential_values,
                   prob = probabilities,
                   size = n,
                   replace = TRUE) 
)

tb <- table(df$outcome)

print(tb)

barplot(tb)

print(tb["relapse"]/n)

```

## Я - супер-главный исследователь

```{r pr_est_repeat, echo = FALSE }
#сделать по аналогии (взять 1000 сэмплов)


```
