)
?TwoSampleMean.NIS
?TwoSampleMean.NIS
# Проведём расчёт
TwoSampleMean.NIS(
alpha = 0.025,
beta = 0.2,       #это 1 - мощность (вероятность ошибки второго рода)
sigma = 5,
k = 1,
delta = 7,       # это разница между группами!
margin = 5       # это граница не меньшей эффективности!
)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(GGally)
library(Hmisc)
pima <- readxl::read_xlsx("pima.xlsx")
pima %>%
summary()
pima_corrected <- pima %>%
# вставьте здесь свой код для исправления данных
mutate(
across(
glucose:mass,
~ na_if(.x, 0)
)
)
pima_corrected %>%
summary()
pima_corrected %>%
ggplot(aes(x = age, y = pressure)) +
geom_point(size = 1.1) +
# Добавим красивые подписи осей
labs(x = "Возраст, лет",
y = "Диаст. артериальное давление, мм рт.ст.") +
# Поменяем оформление графика
theme_bw()
cor.test(pima_corrected$pressure,
pima_corrected$age,
method = "spearman")
pima_corrected %>%
ggplot(aes(x = mass, y = pressure)) +
geom_point(size = 1.1) +
theme_bw()
cor.test(pima_corrected$mass,
pima_corrected$pressure,
method = "pearson")
pima_corrected %>%
ggplot(aes(x = pregnant, y = insulin)) +
geom_point(size = 1.1) +
theme_bw()
cor.test(pima_corrected$insulin,
pima_corrected$pregnant,
method = "spearman")
pima_corrected %>%
ggplot(aes(x = mass, y = triceps)) +
geom_point(size = 1.1)  +
# Добавим красивые подписи осей
labs(x = "ИМТ",
y = "Толщина кожной складки на трицепсе, мм") +
# Добавим на график значения R и p
geom_text(x = 50,
y = 25,
label = "R = 0.65,\np < 0.001",
hjust = 0,
vjust = 1) +
# Добавим линию регрессии, серая область - ДИ
geom_smooth(method = "lm") +
# Поменяем оформление графика
theme_bw()
# стандартизуем случайность
set.seed(45)
# генерируем данные
data_1 <- tibble(
X = rnorm(25),
Y = rnorm(25)
)
# строим график
data_1 %>%
ggplot(aes(X, Y)) +
geom_point() +
theme_bw()
# считаем корреляции
cor.test(data_1$X, data_1$Y)
cor.test(data_1$X, data_1$Y, method = "spearman")
# добавляем выброс
data_2 <- data_1 %>%
bind_rows(
tibble(X = 5, Y = 5)
)
data_2 %>%
ggplot(aes(X, Y)) +
geom_point() +
theme_bw()
cor.test(data_2$X, data_2$Y)
cor.test(data_2$X, data_2$Y, method = "spearman")
pima_corrected %>%
# Выберем переменные для анализа
dplyr::select(glucose, mass, age, triceps) %>%
# Переведём наши данные в длинный формат
pivot_longer(!glucose) %>%
# Сгрупируем переменные по имени
group_by(name) %>%
# Рассчитаем значения р и R
dplyr::summarise(
R = cor.test(glucose, value, method = "spearman")$estimate,
p = cor.test(glucose, value, method = "spearman")$p.value
) %>%
ungroup() %>%
mutate(p.adj = p.adjust(p, method = "holm"))
pivot_longer(!glucose)
pima_corrected %>%
# Выберем переменные для анализа (выбираем именно в dplyr dplyr::select)
dplyr::select(glucose, mass, age, triceps) %>%
# Переведём наши данные в длинный формат
pivot_longer(!glucose)
pima_corrected %>%
# Выберем переменные для анализа (выбираем именно в dplyr dplyr::select)
dplyr::select(glucose, mass, age, triceps) %>%
# Переведём наши данные в длинный формат
pivot_longer(!glucose) %>%
# Сгрупируем переменные по имени
group_by(name) %>%
# Рассчитаем значения р и R
dplyr::summarise(
R = cor.test(glucose, value, method = "spearman")$estimate,
p = cor.test(glucose, value, method = "spearman")$p.value
) %>%
#разгруппировываем датасет, так как может помешать группировка
ungroup() %>%
mutate(p.adj = p.adjust(p, method = "holm"))
rcorr(as.matrix(pima_corrected[1:8]),
type = "spearman")
beatutiful_plot <- ggpairs(pima_corrected[1:4])
print(beatutiful_plot, progress = F)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gt)
mean.plus.minus.sd <- function(x) {
r <- c(mean(x) - sd(x), mean(x), mean(x) + sd(x))
names(r) <- c("ymin", "y", "ymax")
r
}
soccer_general <- read.csv("soccer.csv", sep=";")[, 2:6] %>%
mutate(Position = as.factor(Position),
Nationality = as.factor(Nationality),
Age = as.numeric(Age),
Height = as.numeric(Height)) %>%
filter(Nationality %in% c("Spanish", "Italian", "German", "English", "Argentinian"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gt)
mean.plus.minus.sd <- function(x) {
r <- c(mean(x) - sd(x), mean(x), mean(x) + sd(x))
names(r) <- c("ymin", "y", "ymax")
r
}
soccer_general <- read.csv("soccer.csv", sep=";")[, 2:6] %>%
mutate(Position = as.factor(Position),
Nationality = as.factor(Nationality),
Age = as.numeric(Age),
Height = as.numeric(Height)) %>%
filter(Nationality %in% c("Spanish", "Italian", "German", "English", "Argentinian"))
set.seed(1)
soccer_wrk <- soccer_general[sample(1:nrow(soccer_general), 150), ] %>%
mutate(Nationality = factor(Nationality))
set.seed(1)
soccer_wrk %>%
ggplot() + aes(Position, Height) +
geom_boxplot(outlier.shape = "", colour = "cadetblue3") +
geom_jitter(width = 0.2, colour = "cornsilk4") +
theme_classic() +
ylab("Height (cm)")
soccer_general %>% filter(Position == "Defender") %>% pull(Height) %>% mean
soccer_wrk %>% filter(Position == "Defender") %>% pull(Height) %>% mean
#FIRST CHUNK
library(tidyverse)
library(readxl)
library(flextable)
library(gtsummary)
.hidden <- 1
.hidden <- 1
.hidden <- 1
function <- 1:10
my_var1 <- 42
.hidden <- 1
super_long_name_in_fact_so_long_i_cannot_stop_typing_please_help <- 2:15
2b.or.not.2b <- 2:10
:smiley: <- 'bob'
:smiley: <- 'bob'
next <- c(2, 34)
next <- c(2, 34)
xXx_TerM1Nat0R_xXx <- c(1, 25)
function <- 1:10
.hidden <- 1
?is.logical
a <- c('aa', 'aaa', 'witcher', 'money')
typeof(a)
is.character(a)
is.logical(a)
a <- c('aa', 'aaa', 'witcher', 'money', T)
is.logical(a)
is.character(a)
1:3 + c(-1, 5, 11, 12, 15)
if (sgrt(2) > 1.5) {
print('Greater!')
} else {
print('Less!')
}
if (sqrt(2) > 1.5) {
print('Greater!')
} else {
print('Less!')
}
if (c(T, F)) print('hhh')
if (c(T, F)) print('hhh')
ifelse(runif(8) > 0.5, "Орел", "Решка")
x <- runif(8)
x <- runif(8)
ifelse(x > 2/3, 'Stone',
ifelse(x > 1/3, 'Scissors', 'Paper'))
switch('product',
sum = 5 + 5,
product = 5 * 5,
factorial = factorial(5),
0)
switch('sum',
sum = 5 + 5,
product = 5 * 5,
factorial = factorial(5),
0)
switch('summmer',
sum = 5 + 5,
product = 5 * 5,
factorial = factorial(5),
0)
i <- 0
repeat {
i <- i + runif(1)
print(i)
if (i > 5) break
}
i <- 0
repeat {
i <- i + runif(2)
print(i)
if (i > 5) break
}
i <- 0
repeat {
i <- i + runif(1)
print(i)
if (i > 5) break
}
i <- 25000
while (i > 150) {
i <- i/2
print(i)
}
for (i in 1:8) {
if (i %% 2 == 0) print(i)
}
for (i in letters) {
if (i == 'b') next
if (i == 'd') break
print(i)
} #letters - массив букв англ алфавита
for (i in 1:5) i
v <- 1:1e5
system.time({
x <- 0
for (i in v) x[i] <- sqrt(v[i])
})
v <- 1:1e6
system.time({
x <- 0
for (i in v) x[i] <- sqrt(v[i])
})
v <- 1:1e10
system.time({
x <- 0
for (i in v) x[i] <- sqrt(v[i])
})
v <- 1:1e8
system.time({
x <- 0
for (i in v) x[i] <- sqrt(v[i])
})
v <- 1:1e6
system.time({
x <- 0
for (i in v) x[i] <- sqrt(v[i])
})
v <- 1:1e7
system.time({
x <- 0
for (i in v) x[i] <- sqrt(v[i])
})
system.time({
y <- sqrt(v)
})
system.time({
y <- sqrt(v)
})
system.time({
y <- sqrt(v)
})
system.time({
y <- sqrt(v)
})
v <- 1:1e5
system.time({
x <- 0
for (i in v) x[i] <- sqrt(v[i])
}) #оч долго может просчитывать
#решение проблемы:
system.time({
y <- sqrt(v)
})
identical(x, y)
v <- 1:1e5
system.time({
x <- 0
for (i in v) x[i] <- sqrt(v[i])
}) #оч долго может просчитывать
#решение проблемы:
system.time({
y <- sqrt(v)
})
identical(x, y)
v <- 1:1e5
system.time({
x <- 0
for (i in v) x[i] <- sqrt(v[i])
}) #оч долго может просчитывать
#решение проблемы:
system.time({
y <- sqrt(v)
})
identical(x, y)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
total <- 0
for (i in 1:len(x)) {
if (-0.2 < i < 0.3) {
total <- 0
for (i in 1:len(x)) {
if (i > -0.2) {
if (i < 0.3) {
total <- total + 1
}
}
}
total <- 0
for (i in 1:length(x)) {
if (i > -0.2) {
if (i < 0.3) {
total <- total + 1
}
}
}
total
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
total <- 0
for (i in 1:length(x)) {
if (i > -0.2) {
if (i < 0.3) {
total <- total + 1
}
}
}
total
y <- x[x > -0.2 & x < 0.3]
length(y)
dice_roll <- function(n) {
x <- runif(n)
ifelse(x > 5/6, 6,
ifelse(x > 2/3, 5,
ifelse(x > 1/2, 4,
ifelse(x > 1/3, 3,
ifelse(x > 1/6, 2, 1)))))
}
dice_roll(5)
dice_roll <- function(n) {
x <- sample(1:6, n, replace = T)
print(x)
}
dice_roll(5)
?sample
dice_roll <- function(n) {
x <- sample(1:6, n, replace = T, prob = 1)
print(x)
}
dice_roll(5)
dice_roll <- function(n) {
x <- sample(1:6, n, replace = T, prob = 0.2)
print(x)
}
dice_roll(5)
dice_roll <- function(n) {
x <- sample(1:6, n, replace = T, prob = c(0.1, 0.5))
print(x)
}
dice_roll(5)
dice_roll <- function(n) {
x <- sample(1:6, n, replace = T, prob = c(0.1, 0.5, 0.3, 0.5, 0.2))
print(x)
}
dice_roll(5)
dice_roll <- function(n) {
x <- sample(1:6, n, replace = T, prob = c(0.1, 0.5, 0.3, 0.5, 0.2, 0.6))
print(x)
}
dice_roll(5)
dice_roll <- function(n) {
x <- sample(1:6, n, replace = T, prob = c(0.1, 0.5, 0.3, 0.5, 0.2, 0.9))
print(x)
}
dice_roll(5)
dice_roll <- function(n) {
x <- sample(1:6, n, replace = T, prob = c(0.1, 0.1, 0.3, 0.1, 0.2, 0.9))
print(x)
}
dice_roll(5)
dice_roll <- function(n) {
x <- sample(1:6, n, replace = T, prob = c(0.1, 0.1, 0.3, 0.1, 0.1, 0.9))
print(x)
}
dice_roll(5)
dice_roll <- function(n) {
x <- sample(1:6, n, replace = T, prob = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.9))
print(x)
}
dice_roll(5)
dice_roll <- function(n) {
x <- sample(1:6, n, replace = T, prob = c(0.1, 0.1, 0.01, 0.01, 0.01, 0.9))
print(x)
}
dice_roll(5)
dice_roll <- function(n) {
x <- sample(1:6, n, replace = T, prob = c(0.1, 0.01, 0.01, 0.01, 0.01, 0.9))
print(x)
}
dice_roll(5)
dice_roll <- function(n) {
x <- sample(1:6, n, replace = T, prob = c(0.01, 0.01, 0.01, 0.01, 0.01, 0.9))
print(x)
}
dice_roll(5)
.libPaths()
installed.packages()
grid.newpage()
library(grid)
grid.newpage()
grid.lines()
grid.newpage()
grid.lines()
sessionInfo()
install.packages("randtoolbox")
library(randtoolbox)
library(tidyverse)
library(GGally)
library(broom)
library(ggfortify)
library(Hmisc)
extra <- FALSE
mathematical <- FALSE
theme_set(theme_bw())
brainhead_dat <- read_table2("brainhead.dat.txt",
col_names = FALSE)
# brainhead_dat <- read_table2("~/Downloads/regression_IB_intense_course/brain_head_data/brainhead.dat.txt",
#                              col_names = FALSE)
names(brainhead_dat) <- c("Gender", "Age_range", "Head_size", "Brain_weight")
brainhead_dat$Gender <- as.factor(brainhead_dat$Gender)
brainhead_dat$Age_range <- as.factor(brainhead_dat$Age_range)
brainhead_dat <- brainhead_dat %>% select(Brain_weight, Head_size, Age_range, Gender)
ggpairs(brainhead_dat,  aes(colour = Gender, alpha = 0.4), legend = 3)+theme_bw()
Hmisc::describe(brainhead_dat)
Hmisc::describe(brainhead_dat)
ggpairs(brainhead_dat,  aes(colour = Gender, alpha = 0.4), legend = 3)+theme_bw()
gg_base <- ggplot(brainhead_dat, aes(y = Brain_weight, x = Head_size)) +
geom_point()
gg_base+theme_bw()
gg_uni <- gg_base +
geom_smooth(method = "lm", se = FALSE , fullrange=TRUE)
gg_uni #Does it look like the relationship is close to linear?
model_univariate <- lm(Brain_weight ~ Head_size,  data = brainhead_dat)
summary(model_univariate)
set.seed(42) # /*to create same random numbers below */
n_new <- 10
new_data <- data.frame(Head_size = runif(n_new, min = min(brainhead_dat$Head_size),
max = max(brainhead_dat$Head_size)),
Gender = sample(unique(brainhead_dat$Gender), size = n_new, replace = TRUE),
Age_range = sample(unique(brainhead_dat$Age_range), size = n_new, replace = TRUE))
predicted_brain_weight <- predict(model_univariate, new_data)
new_data$Brain_weight <- predicted_brain_weight
gg_fitted <- gg_uni +
geom_point(data = new_data,
color = "magenta", fill = "yellow", size =4, shape = 21)
gg_fitted
new_data1 <- new_data %>%
add_row(Head_size = 0,
Brain_weight = predict(model_univariate, newdata = data.frame(Head_size = 0)))
gg_uni +
geom_point(data = new_data1,
color = "magenta", fill = "yellow", size =4, shape = 21)
