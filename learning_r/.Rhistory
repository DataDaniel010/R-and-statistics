original_data %>%
glimpse()
#переименование переменной stroke в Group variable и сортировка по ней + выбор только буквенных
original_data %>%
select('Grouping variable' = stroke, where(is.character) & !contains('_'))
#переименование переменной stroke в Group variable и сортировка по ней + выбор только буквенных
original_data %>%
select('Grouping variable' = stroke, gender, bmi)
#переименование переменной stroke в Group variable и сортировка по ней + выбор только буквенных
original_data %>%
select('Grouping variable' = stroke, where(is.character) & !contains('_'))
original_data %>%
filter(gender == 'Male')
original_data %>%
filter(age %in% c(20:40))
#slice_min
original_data %>%
slice_min(age, with_ties=F)
#slice_max
original_data %>%
slice_max(age, with_ties = F)
#slice_max
original_data %>%
slice_max(age)
#slice_max
original_data %>%
slice_max(age, with_ties = F)
original_data %>%
mutate(bmi_num = as.numeric(bmi))
original_data %>%
mutate(bmi_num = as.integer(bmi))
original_data %>%
mutate(bmi_num = as.numeric(bmi))
#across
original_data %>%
mutate(across(c(hypertension, heart_disease, stroke), function(x) factor(x, levels = c('0', '1') labels = c('no', 'yep'))))
#across
original_data %>%
mutate(across(c(hypertension, heart_disease, stroke), function(x) factor(x, levels = c('0', '1'), labels = c('no', 'yep'))))
original_data %>%
select(hypertension) %>%
map(table)
original_data %>%
select(hypertension) %>%
map(table)
#count
original_data %>%
count(age, .drop = F)
original_data
#count
original_data %>%
count(age, .drop = F)
#count
original_data %>%
count(age)
#count
original_data %>%
count(age, .drop=F)
#count
original_data %>%
count(age, rev(sort()), .drop=F)
#count
original_data %>%
count(age, .drop=F)
#FIRST CHUNK
library(tidyverse)
library(readxl)
library(flextable)
library(gtsummary)
library(plotrix)
library(tibble)
original_data <- read_csv('data/raw/healthcare-dataset-stroke-data.csv')
original_data %>%
mutate(bmi_num = as.numeric(bmi))
#count + mutate
original_data %>%
mutate(across(c(gender, stroke), as.factor)) %>%
count(stroke, gender, .drop = F) %>%
mutate('Relative frequency' = (n/sum(n) * 100)) %>%
round(2) %>%
str_c('%')
#count + mutate
original_data %>%
mutate(across(c(gender, stroke), as.factor)) %>%
count(stroke, gender, .drop = F) %>%
mutate('Relative frequency' = (n/sum(n) * 100)) %>%
round(2) %>%
str_c('%')
original_data
#count + mutate
original_data %>%
mutate(across(c(gender, stroke), as.factor)) %>%
count(stroke, gender, .drop = F) %>%
mutate('Relative frequency' = (n/sum(n) * 100)) %>%
round(2) %>%
str_c('%')
#count + mutate
original_data %>%
mutate(across(c(gender, stroke), as.factor)) %>%
count(stroke, gender, .drop = F) %>%
mutate('Relative frequency' = (n/sum(n) * 100) %>% round(2) %>% str_c('%'))
#example
original_data %>%
unite('united-variable', work_type, Residence_type, sep = ',', remove = F)
#example
original_data %>%
unite('united_variable', work_type, Residence_type, sep = '__', remove = T)
#example
original_data %>%
unite('united_variable', work_type, Residence_type, sep = '__', remove = T) %>%
separete(united_variable, into=c('work_type', 'residence_type'), sep='__')
#example
original_data %>%
unite('united_variable', work_type, Residence_type, sep = '__', remove = T) %>%
separate(united_variable, into=c('work_type', 'residence_type'), sep='__')
#FIRST CHUNK
library(tidyverse)
library(readxl)
library(flextable)
library(gtsummary)
library(plotrix)
library(tibble)
#FIRST CHUNK
library(tidyverse)
library(readxl)
library(flextable)
library(gtsummary)
library(plotrix)
library(tibble)
#FIRST CHUNK
library(tidyverse)
library(readxl)
library(flextable)
library(gtsummary)
library(plotrix)
library(tibble)
#FIRST CHUNK
library(tidyverse)
library(readxl)
library(flextable)
library(gtsummary)
library(plotrix)
library(tibble)
#FIRST CHUNK
library(tidyverse)
library(readxl)
library(flextable)
library(gtsummary)
library(plotrix)
library(tibble)
original_data <- read_csv('data/raw/healthcare-dataset-stroke-data.csv')
#FIRST CHUNK
library(tidyverse)
library(readxl)
library(flextable)
library(gtsummary)
library(plotrix)
library(tibble)
#general help
help.start()
#help on package
help(package = 'ggplot2')
#lists all available example datasets
data()
#current working directory
getwd()
is.integer(5)
#чтобы сделать прям интеджер нужно добавить L
is.integer(5L)
sqrt(2)^2 == 2
all.equal(sqrt(2)^2 == 2)
all.equal(sqrt(2)^2, 2)
sin(pi)
sin(pi)
s <- 'hello world'
class(s)
paste('i', 'love', 'R')
paste('i', 'love', 'R', sep = '|')
paste('i', 'love', 'R', sep = '|')
paste0('i', 'love', 'R')
comparison <- 1 == 2
comparison
!FALSE
!!FALSE
T & F
T & F
T & T
T | F
F | F
xor(T, T)
xor(T, T)
xor(T, F)
seq(3, 4, length.out = 5)
v <- seq(1, 2, by = 0.1) #вектор с определенным шагом
v
original_data %>%
head()
#вывод только количественных данных
original_data %>%
select(where(is.numeric))
#начало с определенного значения
original_data %>%
select(starts_with('b'))
#переименование переменной stroke в Group variable и сортировка по ней + выбор только буквенных
original_data %>%
select('Grouping variable' = stroke, where(is.character) & !contains('_'))
#Выбираем только те переменные в значениях которых есть буква r Функция однострочник рассматривает каждый столбец как отдельный вектор, применяется к нему и если после применения результат true, то она выведет нам.
original_data %>%
select(where(function(x) any(str_detect(x, 'r')))) %>%
map(table, useNA = 'always')
#фильтр по всем мужчинам
original_data %>%
filter(gender == 'Male')
#%in%
original_data %>%
filter(work_type %in% c("Private", "Self-employed")) #значения work_type должны удовлетворять хотябы одному из условий
#count
original_data %>%
count(age, .drop=F)
#across
original_data %>%
mutate(across(c(hypertension, heart_disease, stroke), function(x) factor(x, levels = c('0', '1'), labels = c('no', 'yep'))))
original_data
#count + mutate
original_data %>%
mutate(across(c(gender, stroke), as.factor)) %>%
count(stroke, gender, .drop = F) %>%
mutate('Relative frequency' = (n/sum(n) * 100) %>% round(2) %>% str_c('%'))
#example
original_data %>%
unite('united-variable', work_type, Residence_type, sep = ',', remove = F)
#example
original_data %>%
unite('united_variable', work_type, Residence_type, sep = '__', remove = T) %>%
separate(united_variable, into=c('work_type', 'residence_type'), sep='__')
original_data %>%
unite('united_variable', work_type, Residence_type, sep = '__', remove = T)
#example
original_data %>%
unite('united_variable', work_type, Residence_type, sep = '__', remove = T) %>%
separate(united_variable, into=c('work_type', 'residence_type'), sep='__')
original_data %>%
group_by(stroke) %>%
summarise(age_mean = mean(age, na.rm = T),
glucose_max = max(avg_glucose_level, na.rm = T))
original_data %>%
mutate(across(bmi, as.numeric)) %>%
select(id, age, avg_glucose_level, bmi) %>%
pivot_longer(!id) -> data_long
original_data %>%
mutate(across(bmi, as.numeric, na.rm = T)) %>%
select(id, age, avg_glucose_level, bmi) %>%
pivot_longer(!id) -> data_long
original_data %>%
mutate(across(bmi, as.numeric)) %>%
select(id, age, avg_glucose_level, bmi) %>%
pivot_longer(!id) -> data_long
original_data %>%
mutate(across(bmi, as.numeric)) %>%
select(id, age, avg_glucose_level, bmi) %>%
pivot_longer(!id) -> data_long
data_long
data_long %>%
pivot_wider(names_from = name, values_from = value)
original_data %>%
mutate(across(c(gender, stroke), as.factor)) %>%
count(stroke, gender, .drop = F) %>%
mutate('Relative frequency' = ((n/sum(n)) * 100) %>% round(2) %>% str_c('%'), across(stroke, function(x) x %>% as.character() %>% factor(levels = c('0', '1'), labels = c('No', 'Yes')))) %>%
rename('Absolute frequency' = n, 'Gender' = gender, Stroke = stroke) %>%
flextable() %>%
theme_box() %>%
align(align = 'center', part = 'all') %>%
merge_v('Stroke')
original_data %>%
mutate(across(c(gender, stroke), as.factor)) %>%
count(stroke, gender, .drop = F) %>%
mutate('Relative frequency' = ((n/sum(n)) * 100) %>% round(2) %>% str_c('%'), across(stroke, function(x) x %>% as.character() %>% factor(levels = c('0', '1'), labels = c('No', 'Yes')))) %>%
rename('Absolute frequency' = n, 'Gender' = gender, Stroke = stroke) %>%
flextable() %>%
theme_box() %>%
align(align = 'center', part = 'all')
original_data %>%
mutate(across(c(gender, stroke), as.factor)) %>%
count(stroke, gender, .drop = F) %>%
mutate('Relative frequency' = ((n/sum(n)) * 100) %>% round(2) %>% str_c('%'), across(stroke, function(x) x %>% as.character() %>% factor(levels = c('0', '1'), labels = c('No', 'Yes')))) %>%
rename('Absolute frequency' = n, 'Gender' = gender, Stroke = stroke) %>%
flextable() %>%
theme_box() %>%
align(align = 'center', part = 'all') %>%
merge_v('Stroke')
original_data %>%
mutate(across(c(gender, stroke), as.factor)) %>%
count(stroke, gender, .drop = F) %>%
mutate('Relative frequency' = ((n/sum(n)) * 100) %>% round(2) %>% str_c('%'), across(stroke, function(x) x %>% as.character() %>% factor(levels = c('0', '1'), labels = c('No', 'Yes')))) %>%
rename('Absolute frequency' = n, 'Gender' = gender, Stroke = stroke) %>%
flextable() %>%
theme_box() %>%
align(align = 'center', part = 'all') %>%
merge_v('Stroke')
merge_v('Stroke')
original_data %>%
mutate(across(c(gender, stroke), as.factor)) %>%
count(stroke, gender, .drop = F) %>%
mutate('Relative frequency' = ((n/sum(n)) * 100) %>% round(2) %>% str_c('%'), across(stroke, function(x) x %>% as.character() %>% as.factor()) %>%
rename('Absolute frequency' = n, 'Gender' = gender, Stroke = stroke) %>%
flextable() %>%
theme_box() %>%
align(align = 'center', part = 'all') %>%
merge_v('Stroke')
original_data %>%
mutate(across(c(gender, stroke), as.factor)) %>%
count(stroke, gender, .drop = F) %>%
mutate('Relative frequency' = ((n/sum(n)) * 100) %>% round(2) %>% str_c('%'), across(stroke, function(x) x %>% as.character() %>% as.factor(levels = c('0', '1'), labels = c('No', 'Yes')))) %>%
rename('Absolute frequency' = n, 'Gender' = gender, Stroke = stroke) %>%
flextable() %>%
theme_box() %>%
align(align = 'center', part = 'all') %>%
merge_v('Stroke')
original_data %>%
mutate(across(c(gender, stroke), as.factor)) %>%
count(stroke, gender, .drop = F) %>%
mutate('Relative frequency' = ((n/sum(n)) * 100) %>% round(2) %>% str_c('%'), across(stroke, function(x) x %>% as.character() %>% factor(levels = c('0', '1'), labels = c('No', 'Yes')))) %>%
rename('Absolute frequency' = n, 'Gender' = gender, Stroke = stroke) %>%
flextable() %>%
theme_box() %>%
align(align = 'center', part = 'all') %>%
merge_v('Stroke')
original_data %>%
mutate(across(c(gender, stroke), as.factor)) %>%
count(stroke, gender, .drop = F) %>%
mutate('Relative frequency' = ((n/sum(n)) * 100) %>% round(2) %>% str_c('%'), across(stroke, function(x) x %>% as.character() %>% as.factor)) %>%
rename('Absolute frequency' = n, 'Gender' = gender, Stroke = stroke) %>%
flextable() %>%
theme_box() %>%
align(align = 'center', part = 'all') %>%
merge_v('Stroke')
original_data %>%
mutate(across(c(gender, stroke), as.factor)) %>%
count(stroke, gender, .drop = F) %>%
mutate('Relative frequency' = ((n/sum(n)) * 100) %>% round(2) %>% str_c('%'), across(stroke, function(x) x %>% as.character() %>% factor(levels = c('0', '1'), labels = c('No', 'Yes')))) %>%
rename('Absolute frequency' = n, 'Gender' = gender, Stroke = stroke) %>%
flextable() %>%
theme_box() %>%
align(align = 'center', part = 'all') %>%
merge_v('Stroke')
original_data %>%
mutate(across(bmi, as.numeric)) %>%
select(age, bmi, stroke) %>%
tbl_summary(by = 'stroke') %>%
add_p()
original_data %>%
mutate(across(bmi, as.numeric)) %>%
select(age, bmi, gender, stroke) %>%
tbl_summary(by = 'stroke') %>%
add_p()
original_data %>%
mutate(across(bmi, as.numeric)) %>%
select(age, bmi, gender, stroke) %>%
tbl_summary(by = "stroke") %>%
add_p()
original_data %>%
mutate(bmi_clear = na.rm(bmi))
data <- attitude
data
View(data)
subset(data, rating < 50, -rating)
subset(sel = -rating, sub = rating < 50, attitude)
attitude[rating < 50, names(attitude) != "rating"]
data[rating < 50, names(attitude) != "rating"]
attitude[attitude$rating < 50, names(attitude) != "rating"]
attitude[attitude$rating < 50, -"rating"]
data_1 <- subset(data, learning > 69, select = c(complaints, raises, advance))
data_1
rev(sort(data$learning))
data_1
attitude[attitude$rating < 50, names(attitude) != "rating"]
data_q <- quakes
View(data_q)
?quakes
max(data_q$mag)
mean(data_q$depth)
tail(data_q)
head(data-q)
head(data_q)
data_q %>%
median(depth)
data_q %>%
median('depth')
median(data_q$depth)
min(data_q$mag)
data_q %>%
max(mag)
data_q %>%
slice_max(mag)
data_q %>%
slice_min(mag)
data_q %>%
slice_min(mag) %>%
head()
data_q %>%
#slice_min(mag) %>%
head() %>%
mean(depath)
data_q %>%
#slice_min(mag) %>%
head() %>%
mean(depth)
data_q %>%
#slice_min(mag) %>%
head()
#FIRST CHUNK
library(tidyverse)
library(readxl)
library(flextable)
library(gtsummary)
library(plotrix)
library(tibble)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(flextable)
library(gtsummary)
library(ggplot2)
mtcars <- as_tibble(mtcars)
fisher.test(cbind(c(1,3), c(3,1)))
table(c(1:10))
table(c(1, 2, 1, 3, 1, 2, 5, 11, 5, 2, 3, 2, 3, 2, 2))
min(table(c(1, 2, 1, 3, 1, 2, 5, 11, 5, 2, 3, 2, 3, 2, 2)))
min(table(c(1, 2, 1, 3, 1, 2, 5, 11, 5, 2, 3, 2, 3, 2, 2, 11)))
#FIRST CHUNK
library(tidyverse)
library(readxl)
library(flextable)
library(gtsummary)
library(plotrix)
library(tibble)
#current working directory
getwd()
ls()
library(tidyverse)
library(ggExtra)
library(ggpubr)
hogwarts <- read_csv('data/hogwarts.csv')
hogwarts <- read_csv('data/raw/hogwarts.csv')
hogwarts
View(hogwarts)
#FIRST CHUNK
library(tidyverse)
library(readxl)
library(flextable)
library(gtsummary)
library(plotrix)
library(tibble)
#current working directory
getwd()
if <- 1
TRUE <-  5
`if` <- 5
xor(T, F)
complexnumber <- 2+2i
class(complexnumber)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(flextable)
library(gtsummary)
library(ggplot2)
min(table(c(1, 2, 1, 3, 1, 2, 5, 11, 5, 2, 3, 2, 3, 2, 2, 11)))
#importing and inspecting data
avian <-  read.csv('https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv')
View(avian)
str(avian)
head(avian)
summary(avian)
#пропуск пропущенных значений
any(!complete.cases(avian))
any(avaian$PDB < 0)
any(avian$PDB < 0)
check_percent_range <- function(x) {
any(x < 0 | x > 100)
}
check_percent_range(avian$PW)
#Transforming variables
names(avian)
coverage_variables <- names(avian)[-(1:4)][c(T, F)]
#Transforming variables (можно из одних мер измерения в другие, можно создать новую переменную)
names(avian)
avian$total_coverage  <- rowSums(avian[, coverage_variables])
avian
summary(avian$total_coverage)
#начало работы в R
9801/9
log(2176782336, base = 6)
log(10) * 5
sin(pi)
sin(pi/2)
sin(pi/6)
#создание векторов
v <- c(2, 30, 5000)
1:20
20:1
sum(1:100)
vec <- c(1:20, 19:1)
vec
vec1 <- c(5:2, 2:5)
vec1
vec2 <- seq(2, 20, by=2)
vec2
vec3 <- seq(0.1, 1, by=0.1)
vec3
vec4 <- seq(2020, 2100, by = 4)
vec4
